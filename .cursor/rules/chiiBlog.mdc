---
description: 
globs: 
alwaysApply: true
---
# chiiBlog 项目开发规则

## 技术栈与架构
1. **核心框架**：使用 React + TypeScript 构建组件化前端。
2. **样式方案**：采用 Tailwind CSS 实现快速、一致的样式设计。
3. **构建工具**：基于 Vite 实现高性能开发和构建。

## 模块化与组件化
1. **组件划分**：
   - 页面级组件放在 `src/pages` 目录。
   - 可复用 UI 组件放在 `src/components` 目录。
   - 每个组件应包含自己的类型定义（优先使用 `interface`）。
2. **数据管理**：
   - 静态数据（如文章、产品）存放在 `src/data` 目录的 JSON 文件中。
   - 动态数据或全局状态使用 React Context（如 `SearchContext`）。

## 开发规范
1. **文件命名**：
   - 组件文件使用 PascalCase（如 `BlogCard.tsx`）。
   - 非组件文件使用 camelCase（如 `articles.json`）。
2. **代码风格**：
   - 使用 ES6+ 语法和 TypeScript 类型注解。
   - 为每个函数、组件和复杂逻辑添加清晰注释。
3. **性能优化**：
   - 使用 React.memo 或 useMemo 避免不必要的渲染。
   - 动态导入（懒加载）非关键组件。

## 设计原则
1. **响应式设计**：
   - 确保布局在移动端和桌面端均表现良好。
   - 使用 Tailwind 的响应式工具类（如 `md:`、`lg:`）。
2. **视觉一致性**：
   - 颜色、间距等设计变量通过 Tailwind 配置统一管理。
   - SVG 图标优先放在 `public` 目录。

## 扩展性
1. **添加新功能**：
   - 新页面应遵循现有路由和布局结构。
   - 新组件需通过 Props 或 Context 与其他部分解耦。
2. **主题化支持**：
   - 使用 Tailwind 的暗色模式或自定义主题实现动态换肤。

## 调试与维护
1. **Bug 处理流程**：
   - 复现问题后，优先检查类型定义和数据流。
   - 若问题复杂，提供至少两种解决方案供选择。
2. **代码审查**：
   - 确保组件职责单一，避免冗余代码。